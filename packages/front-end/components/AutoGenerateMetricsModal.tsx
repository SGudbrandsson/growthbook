import { useState, useEffect } from "react";
import { TrackedEventData } from "@/../back-end/src/types/Integration";
import {
  DataSourceInterfaceWithParams,
  DataSourceSettings,
} from "@/../back-end/types/datasource";
import { cloneDeep } from "lodash";
import { useForm } from "react-hook-form";
import { MetricType } from "@/../back-end/types/metric";
import track from "@/services/track";
import { useAuth } from "@/services/auth";
import { useDefinitions } from "@/services/DefinitionsContext";
import Button from "./Button";
import { DocLink } from "./DocLink";
import Modal from "./Modal";
import Tooltip from "./Tooltip/Tooltip";
import AutoMetricCard from "./Settings/AutoMetricCard";
import SelectField from "./Forms/SelectField";

type Props = {
  setShowAutoGenerateMetricsModal: (show: boolean) => void;
  datasource?: DataSourceInterfaceWithParams;
  source: string;
  mutate: () => void;
};

export default function AutoGenerateMetricsModal({
  setShowAutoGenerateMetricsModal,
  datasource,
  source,
  mutate,
}: Props) {
  const [autoMetricError, setAutoMetricError] = useState("");
  const [trackedEvents, setTrackedEvents] = useState<TrackedEventData[]>([]);
  const { datasources } = useDefinitions();
  const [selectedDatasource, setSelectedDatasource] = useState<
    DataSourceInterfaceWithParams | undefined
  >(datasource || datasources[0]);
  const { apiCall } = useAuth();

  const form = useForm<{
    datasourceId: string;
    settings: DataSourceSettings | undefined;
    metricsToCreate: {
      name: string;
      sql: string;
      type: MetricType;
    }[];
  }>({
    defaultValues: {
      datasourceId: datasource?.id || "",
      settings: datasource?.settings || {},
      metricsToCreate: [],
    },
  });

  const submit = async () => {
    track("Generating Auto Metrics For User", {
      metricsToCreate: form.watch("metricsToCreate"),
      source,
      type: selectedDatasource?.type,
      dataSourceId: selectedDatasource?.id,
      schema: selectedDatasource?.settings.schemaFormat,
      newDatasourceForm: true,
    });

    const value = {
      datasourceId: selectedDatasource?.id,
      projects: selectedDatasource?.projects,
      metricsToCreate: form.watch("metricsToCreate"),
    };

    await apiCall(`/metrics/auto-metrics`, {
      method: "POST",
      body: JSON.stringify(value),
    });
    mutate();
  };

  const getTrackedEvents = async () => {
    setAutoMetricError("");
    if (!selectedDatasource?.properties?.supportsAutoGeneratedMetrics) {
      return;
    }
    try {
      track("Generate Auto Metrics CTA Clicked", {
        source,
        type: selectedDatasource?.type,
        dataSourceId: selectedDatasource?.id,
        schema: selectedDatasource?.settings.schemaFormat,
        newDatasourceForm: true,
      });
      const res = await apiCall<{
        trackedEvents: TrackedEventData[];
        message?: string;
      }>(`/datasource/${selectedDatasource?.id}/auto-metrics`, {
        method: "POST",
      });
      if (res.message) {
        track("Generate Auto Metrics Error", {
          error: res.message,
          source,
          type: selectedDatasource?.type,
          dataSourceId: selectedDatasource?.id,
          schema: selectedDatasource?.settings.schemaFormat,
          newDatasourceForm: true,
        });
        setAutoMetricError(res.message);
        return;
      }
      // Before we setMetricsToCreate, we need to add a "shouldCreate" boolean property to each metric
      res.trackedEvents.forEach((event: TrackedEventData) => {
        event.metricsToCreate.forEach((metric) => {
          metric.shouldCreate = true;
        });
      });
      setTrackedEvents(res.trackedEvents);
    } catch (e) {
      track("Generate Auto Metrics Error", {
        error: e.message,
        source,
        type: selectedDatasource?.type,
        dataSourceId: selectedDatasource?.id,
        schema: selectedDatasource?.settings.schemaFormat,
        newDatasourceForm: true,
      });
      setAutoMetricError(e.message);
    }
  };

  useEffect(() => {
    const updatedMetricsToCreate: {
      name: string;
      sql: string;
      type: MetricType;
    }[] = [];
    trackedEvents.forEach((event: TrackedEventData) => {
      event.metricsToCreate.forEach((metric) => {
        if (metric.shouldCreate) {
          updatedMetricsToCreate.push({
            name: metric.name,
            type: metric.type,
            sql: metric.sql,
          });
        }
      });
    });
    form.setValue("metricsToCreate", updatedMetricsToCreate);
  }, [form, trackedEvents]);

  return (
    <Modal
      size="lg"
      open={true}
      header="Discover Metrics"
      close={() => setShowAutoGenerateMetricsModal(false)}
      submit={submit}
      cta={`Create Metric${
        form.watch("metricsToCreate").length === 1 ? "" : "s"
      }`}
      ctaEnabled={form.watch("metricsToCreate").length > 0}
    >
      <>
        <h4>Generate Metrics Automatically</h4>
        <p>
          Select a datasource below to see if we&apos;re able to generate
          metrics for you automatically, based on your tracked events.
          <DocLink docSection={"metrics"}>Learn More</DocLink>
        </p>
        <SelectField
          label="Select A Data Source"
          value={selectedDatasource?.id || ""}
          onChange={async (v) => {
            form.setValue("datasourceId", v);
            setSelectedDatasource(datasources.find((d) => d.id === v));
            await getTrackedEvents();
          }}
          options={(datasources || []).map((d) => ({
            value: d.id,
            label: `${d.name}${d.description ? ` â€” ${d.description}` : ""}`,
          }))}
          className="portal-overflow-ellipsis"
          name="datasource"
          initialOption="Manual"
          disabled={datasource ? true : false}
        />

        {/* If the selectedDatasource supports auto generated metrics, show the cta
        otherwise, show a message that this datasource doesn't support auto generated metrics */}
        {selectedDatasource?.properties?.supportsAutoGeneratedMetrics ? (
          <>
            {trackedEvents.length === 0 ? (
              <div className="alert alert-info d-flex justify-content-between align-items-center">
                <div className="pr-4">
                  {`With ${selectedDatasource?.settings.schemaFormat}, we may be able to automatically generate metrics from your tracked events, `}
                  <strong>
                    saving you and your team valuable time. (It&apos;s Free)
                  </strong>
                </div>
                <div>
                  <Button
                    onClick={async () => {
                      setAutoMetricError("");
                      try {
                        track("Generate Auto Metrics CTA Clicked", {
                          source,
                          type: selectedDatasource?.type,
                          dataSourceId: selectedDatasource?.id,
                          schema: selectedDatasource?.settings.schemaFormat,
                          newDatasourceForm: true,
                        });
                        const res = await apiCall<{
                          trackedEvents: TrackedEventData[];
                          message?: string;
                        }>(
                          `/datasource/${selectedDatasource?.id}/auto-metrics`,
                          {
                            method: "POST",
                          }
                        );
                        if (res.message) {
                          track("Generate Auto Metrics Error", {
                            error: res.message,
                            source,
                            type: selectedDatasource?.type,
                            dataSourceId: selectedDatasource?.id,
                            schema: selectedDatasource?.settings.schemaFormat,
                            newDatasourceForm: true,
                          });
                          setAutoMetricError(res.message);
                          return;
                        }
                        // Before we setMetricsToCreate, we need to add a "shouldCreate" boolean property to each metric
                        res.trackedEvents.forEach((event: TrackedEventData) => {
                          event.metricsToCreate.forEach((metric) => {
                            metric.shouldCreate = true;
                          });
                        });
                        setTrackedEvents(res.trackedEvents);
                      } catch (e) {
                        track("Generate Auto Metrics Error", {
                          error: e.message,
                          source,
                          type: selectedDatasource?.type,
                          dataSourceId: selectedDatasource?.id,
                          schema: selectedDatasource?.settings.schemaFormat,
                          newDatasourceForm: true,
                        });
                        setAutoMetricError(e.message);
                      }
                    }}
                    color="warning"
                    className="font-weight-bold"
                  >
                    See What Metrics We Can Create
                  </Button>
                </div>
              </div>
            ) : (
              <div>
                <p>
                  {`These are the tracked events we found from ${selectedDatasource?.settings.schemaFormat} in your connected warehouse. We can use these events to automatically
                              generate the following metrics for you. And don't worry, you can always edit and remove these
                              metrics at anytime after they're created. `}
                  <DocLink docSection={"metrics"}>
                    Click here to learn more about GrowthBook Metrics.
                  </DocLink>
                </p>
                {trackedEvents.length > 0 && (
                  <>
                    <div className="d-flex justify-content-end">
                      <Button
                        color="link"
                        onClick={async () => {
                          const updates: TrackedEventData[] = cloneDeep(
                            trackedEvents
                          );
                          updates.forEach((event) => {
                            event.metricsToCreate.forEach((metric) => {
                              metric.shouldCreate = true;
                            });
                          });
                          setTrackedEvents(updates);
                        }}
                      >
                        Check All
                      </Button>
                      <Button
                        color="link"
                        onClick={async () => {
                          const updates: TrackedEventData[] = cloneDeep(
                            trackedEvents
                          );
                          updates.forEach((event) => {
                            event.metricsToCreate.forEach((metric) => {
                              metric.shouldCreate = false;
                            });
                          });
                          setTrackedEvents(updates);
                        }}
                      >
                        Uncheck All
                      </Button>
                    </div>
                    <table className="appbox table experiment-table gbtable">
                      <thead>
                        <tr>
                          <th>Event Name</th>
                          <th className="text-center">Count</th>
                          <th className="text-center">
                            <Tooltip body="Binomial metrics are simple yes/no conversions (E.G. Created Account)">
                              Create Binomial Metric
                            </Tooltip>
                          </th>
                          <th className="text-center">
                            {" "}
                            <Tooltip body="Count metrics sum conversion values per user (E.G. Pages per Visit)">
                              Create Count Metric
                            </Tooltip>
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {trackedEvents.map((event, i) => {
                          return (
                            <AutoMetricCard
                              key={`${event}-${i}`}
                              event={event}
                              trackedEvents={trackedEvents}
                              setTrackedEvents={setTrackedEvents}
                              form={form}
                              i={i}
                              dataSourceId={selectedDatasource?.id || ""}
                            />
                          );
                        })}
                      </tbody>
                    </table>
                  </>
                )}
              </div>
            )}
          </>
        ) : (
          <div className="alert alert-warning">
            Sorry - this data source does not support auto generated metrics.{" "}
            <DocLink docSection={"metrics"}>Learn More</DocLink>
          </div>
        )}
        {autoMetricError && (
          <div className="alert alert-danger">{autoMetricError}</div>
        )}
      </>
    </Modal>
  );
}
